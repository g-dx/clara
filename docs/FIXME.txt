- Type check arithmetic operators (more generally, define operator rules better or more succinctly)
- Type check variadic function calls
- Move int -> byte casting into the AST rather than outputting them during code gen
- Consider making byte storage on stack & heap a single byte rather than 8-bytes. This will mean sign-extending before any arithmetic.
- Provide a mechanism for escaping double quotes in string literals.
- Support calling functions stored in structs.
- []byte & []int should *not* interchangeable when matching method signatures.
- Fix scoping for variables containing functions which shadow same name of global function. In the example below the first call
to cube(3) will yield a nil type for the funcCall node. This because it resolves the identifier symbol from the line below (it
was added during the parse and is in scope) but does not have a type yet because we obviously haven't reached that line yet.

fn main() {
  printf("%d\n", cube(3)) // Should print 27
  cube = double
  printf("%d\n", cube(3)) // Should print 6
}

This problem is fundamentally caused by added symbols during the parse.

DONE:
----

- Position information for invalid operands always assume "left" is to blame.
- Type check function calls (Maybe also provide a way to disable this as it is handy for experimentation)
- Ensure functions which return something terminate properly.
- Functions which return structs should be able to occupy the left position on a '.' call.
- Ensure built-in functions cannot be overridden. To do this we could "namespace" all function names by prefixing with "clara_"
- Ensure struct constructors cannot be overridden.
- Support negative numbers.
- Allow functions to have same name as builtin types such as byte, int
- Allow full function overloading

N/A
---
- Type check parameter expressions with respect to the parameter type (default parameters current removed)