- Type check variadic function calls
- Add byte support for bitwise operators.
- Allow panic() to operate as a return statement
- Add boolean short circuiting
- Update ASM generation to produce PIE executables. This will allow passing external functions as parameters
- Parser bug:

struct x { f: fn(int) nothing }
fn getX(x: x) fn(int) nothing = x.f
X(println).get()(999)

- Maybe perform top-level type processing using an "on-demand" scheme which must check for cycles. This
  will allow merging the type instantiation of fields/enums/parameters into regular top level type processing.

- Start to define a higher level interface for AsmWriter
- Remove lots of tagging and untagging from expression handling
- Introduce an "any" type & update printf & friends
- Move #[RawValues] processing into an AST pass and out of codegen
- Check for superfluous type parameters on methods, structs & fields
- Compare and rank functions containing generic types. Eg:
  * get(b: box«T») T
  * get(b: box«int») int

- Clean up function call type checking.