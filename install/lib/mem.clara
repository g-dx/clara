// TODO: Whole file should be private

struct block {
    next: block
    header: int
    // ... data ...
}

fn claralloc(size: int, description: string, id: int) block {
    gc()
    // -----------------------------------------------------------------------------------------------------------------
    // NOTE: No constructors can be invoked below this line!!!
    // -----------------------------------------------------------------------------------------------------------------
    if size == 0 {
        panic("Cannot allocate zero memory!")
    }
    b := calloc(size+16, 1) // 16 = 8 byte header (GC info, etc) & 8 byte pointer to next block, 1 = byte elements
    if not b.isValidBlock() {
        panic("Failed to allocate memory!")
    }
    b.header = id << 47
    b.next = getBlocks()
    setBlocks(b)
    b = b.inc(16) // Skip past next & header
    debug("gc", "ðŸš§\n - %s (Id=%d, Size=%d, Addr=0x%09lx)\n", description, id, size, b)
    debug("gc", "â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ MALLOC \n")
    return b
}

fn clarafree(b: block) {
    free(b)
}

// Pointer manipulation
fn inc(b: block, i: int) block = unsafe(b, i, type(block))
fn isValidBlock(b: block) bool = not(unsafe(b, 0, type(int)) == 0)
fn emptyBlock() block = unsafe(0, 0, type(block))

// ---------------------------------------------------------------------------------------------------------------------
// External Functions
// ---------------------------------------------------------------------------------------------------------------------

// Source: libc, https://www.gnu.org/software/libc/manual/html_node/Allocating-Cleared-Space.html#Allocating-Cleared-Space
#[RawValues]
fn calloc(count: int, eltsize: int) block

// Source: libc, https://www.gnu.org/software/libc/manual/html_node/Freeing-after-Malloc.html#Freeing-after-Malloc
#[RawValues]
fn free(b: block) nothing

// Heap linked list
fn getBlocks() block
fn setBlocks(b: block) nothing