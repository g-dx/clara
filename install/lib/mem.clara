// TODO: Whole file should be private

struct block {
    next: block
    header: int
    // ... data ...
}

fn claralloc(size: int, description: string) block {
    gc()
    // -----------------------------------------------------------------------------------------------------------------
    // NOTE: No constructors can be invoked below this line!!!
    // -----------------------------------------------------------------------------------------------------------------
    if size == 0 {
        panic("Cannot allocate zero memory!")
    }
    b := calloc(size+16, 1) // 16 = 8 byte header (GC info, etc) & 8 byte pointer to next block, 1 = byte elements
    if not b.isValidBlock() {
        panic("Failed to allocate memory!")
    }
    b.next = getBlocks()
    setBlocks(b)
    b = b.inc(16) // Skip past next & header
    debug("gc", "ðŸš§\n - Type   : %s\n - Size   : %d bytes\n - Address: 0x%lx\n", description, size, b)
    return b
}

fn clarafree(b: block) {
    free(b)
}

// ---------------------------------------------------------------------------------------------------------------------
// External Functions
// ---------------------------------------------------------------------------------------------------------------------

// Source: libc, https://www.gnu.org/software/libc/manual/html_node/Allocating-Cleared-Space.html#Allocating-Cleared-Space
fn calloc(count: int, eltsize: int) block

// Source: libc, https://www.gnu.org/software/libc/manual/html_node/Freeing-after-Malloc.html#Freeing-after-Malloc
fn free(b: block) nothing

// Heap linked list
fn getBlocks() block
fn setBlocks(b: block) nothing

// Pointer manipulation
fn inc(b: block, i: int) block