// ---------------------------------------------------------------------------------------------------------------------
fn byte(s: string, idx: int) int {
    assert(idx < s.length, "idx is out of range")
    return s.toPointer(8).readByte(idx).tag()
}

// ---------------------------------------------------------------------------------------------------------------------
fn Equals(s1: string, s2: string) bool {
    if not (s1.length == s2.length) {
        return false
    }

    for i in 0 .. s1.length {
        if not (s1.byte(i) == s2.byte(i)) {
            return false
        }
    }
    return true
}

// ---------------------------------------------------------------------------------------------------------------------

fn Substring(s: string, start: int, end: int) string = toString(s.asBytes(), start, end - start)

// ---------------------------------------------------------------------------------------------------------------------

fn IndexOf(s: string, sub: string) int = IndexOf(s, sub, 0)

// Simple brute force substring match. If found return index or -1 if no match.
// TODO: Replace with Rabin-Karp or Boyer-Moore
fn IndexOf(s: string, sub: string, from: int) int {
    // Special cases
    if sub.length == 0 {
        return 0
    }
    if s.length == 0 {
        return -1
    }
    if sub.length + from > s.length {
        return -1
    }

    matchRun := fn(s: string, sub: string, pos: int) bool {
        i := 1 // First byte already matched
        while pos < s.length and i < sub.length {
            if not (s.byte(pos) == sub.byte(i)) {
                return false
            }
            i = i + 1
            pos = pos + 1
        }
        return i == sub.length
    }

    for pos in from .. s.length {
        if s.byte(pos) == sub.byte(0) and matchRun(s, sub, pos+1) {
            return pos // Match found
        }
    }
    return -1
}

// ---------------------------------------------------------------------------------------------------------------------

struct byteBuffer {
    data: bytes
    size: int
}

// ---------------------------------------------------------------------------------------------------------------------

fn NewByteBuffer(cap: int) byteBuffer = ByteBuffer(Bytes(cap), 0)

fn size(buf: byteBuffer) int = buf.size
fn reset(buf: byteBuffer) { buf.size = 0 }
fn toString(buf: byteBuffer) string = buf.data.toString(buf.size)

// ---------------------------------------------------------------------------------------------------------------------

fn append(buf: byteBuffer, s: string) byteBuffer {
    newSize := buf.size + s.length
    if newSize > buf.data.length() {
        buf.grow(newSize)
    }
    copyString(s, 0, buf.data, buf.size)
    buf.size = newSize
    return buf
}

// ---------------------------------------------------------------------------------------------------------------------

fn substring(buf: byteBuffer, pos: int, length: int) string {
    if pos < 0 or length < 0 {
        panic("pos or length cannot be negative")
    }
    if pos+length > buf.size {
        panic("pos+length > buf.size")
    }
    if length == 0 {
        return ""
    }
    return buf.data.toString(pos, length)
}

// ---------------------------------------------------------------------------------------------------------------------

fn append(buf: byteBuffer, b: int) {
    newSize := buf.size + 1
    if newSize > buf.data.length() {
        buf.grow(newSize)
    }
    buf.data.set(buf.size, b)
    buf.size = newSize
}

// ---------------------------------------------------------------------------------------------------------------------
// TODO: Should be "private"
fn grow(buf: byteBuffer, requiredSize: int) {
    newSize := buf.data.length() * 2
    while newSize < requiredSize {
        newSize = newSize * 2
    }
    data := Bytes(newSize)
    copyArray(buf.data, 0, data, 0)
    buf.data = data
}

// ---------------------------------------------------------------------------------------------------------------------

fn append(s1: string, s2: string) string {
    length := s1.length + s2.length
    buf := Bytes(length + 1) // + 1 for NUL byte
    buf.unsafe(0, type(bytesHeader)).length = length // Ugh!
    copyString(s1, 0, buf, 0)
    copyString(s2, 0, buf, s1.length)
    return buf.asString()
}

// ---------------------------------------------------------------------------------------------------------------------

fn copyString(src: string, srcPos: int, dest: bytes, destPos: int) {
    while srcPos < src.length and destPos < dest.length() {
        dest.set(destPos, src.asBytes().get(srcPos))
        srcPos = srcPos+1
        destPos = destPos+1
    }
}

// ---------------------------------------------------------------------------------------------------------------------

fn toString(b: bytes) string = toString(b, b.length())
fn toString(b: bytes, length: int) string = toString(b, 0, length)
fn toString(b: bytes, pos: int, length: int) string {
    s := Bytes(length + 1) // + 1 for NUL byte
    s.unsafe(0, type(bytesHeader)).length = length // Ugh!
    copyArray(b, pos, s, 0)
    return s.asString()
}

// TODO: Should be private!
fn asString(b: bytes) string = unsafe(b, 0, type(string))
fn asBytes(s: string) bytes = unsafe(s, 0, type(bytes))