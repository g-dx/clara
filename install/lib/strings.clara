// ---------------------------------------------------------------------------------------------------------------------
fn Equals(s1: string, s2: string) bool {
    if not (s1.length == s2.length) {
        return false
    }

    for i in 0 .. s1.length {
        if not (s1[i] == s2[i]) {
            return false
        }
    }
    return true
}

// ---------------------------------------------------------------------------------------------------------------------

// Simple brute force substring match. If found return index or -1 if no match.
// TODO: Replace with Rabin-Karp or Boyer-Moore
fn Index(s: string, sub: string) int {
    // Special cases
    if sub.length == 0 {
        return 0
    }
    if s.length == 0 {
        return -1
    }
    if sub.length > s.length {
        return -1
    }

    matchRun := fn(s: string, sub: string, pos: int) bool {
        i := 1 // First byte already matched
        while pos < s.length and i < sub.length {
            if not (s[pos] == sub[i]) {
                return false
            }
            i = i + 1
            pos = pos + 1
        }
        return i == sub.length
    }

    for pos in 0 .. s.length {
        if s[pos] == sub[0] and matchRun(s, sub, pos+1) {
            return pos // Match found
        }
    }
    return -1
}

// ---------------------------------------------------------------------------------------------------------------------

struct byteBuffer {
    data: []byte
    size: int
}

// ---------------------------------------------------------------------------------------------------------------------

fn NewByteBuffer(cap: int) byteBuffer = ByteBuffer(byteArray(cap), 0)

fn size(buf: byteBuffer) int = buf.size
fn reset(buf: byteBuffer) { buf.size = 0 }
fn toString(buf: byteBuffer) string = buf.data.toString(buf.size)

// ---------------------------------------------------------------------------------------------------------------------

fn append(buf: byteBuffer, s: string) byteBuffer {
    newSize := buf.size + s.length
    if newSize > buf.data.length {
        buf.grow()
    }
    copyString(s, 0, buf.data, buf.size)
    buf.size = newSize
    return buf
}

// ---------------------------------------------------------------------------------------------------------------------

fn substring(buf: byteBuffer, pos: int, length: int) string {
    if pos < 0 or length < 0 {
        panic("pos or length cannot be negative")
    }
    if pos+length > buf.size {
        panic("pos+length > buf.size")
    }
    if length == 0 {
        return ""
    }
    return buf.data.toString(pos, length)
}

// ---------------------------------------------------------------------------------------------------------------------

fn append(buf: byteBuffer, b: byte) {
    newSize := buf.size + 1
    if newSize > buf.data.length {
        buf.grow()
    }
    buf.data[buf.size] = b
    buf.size = newSize
}

// ---------------------------------------------------------------------------------------------------------------------
// TODO: Should be "private"
fn grow(buf: byteBuffer) {
    data := byteArray(buf.data.length * 2)
    copyArray(buf.data, 0, data, 0)
    buf.data = data
}

// ---------------------------------------------------------------------------------------------------------------------

fn append(s1: string, s2: string) string {
    length := s1.length + s2.length
    bytes := byteArray(length + 1, length) // + 1 for NUL byte
    copyString(s1, 0, bytes, 0)
    copyString(s2, 0, bytes, s1.length)
    return bytes.asString()
}

// ---------------------------------------------------------------------------------------------------------------------

fn copyString(src: string, srcPos: int, dest: []byte, destPos: int) {
    while srcPos < src.length and destPos < dest.length {
        dest[destPos] = src[srcPos]
        srcPos = srcPos+1
        destPos = destPos+1
    }
}

// ---------------------------------------------------------------------------------------------------------------------

fn toString(b: []byte) string = toString(b, b.length)
fn toString(b: []byte, length: int) string = toString(b, 0, length)
fn toString(b: []byte, pos: int, length: int) string {
    s := byteArray(length + 1, length, 4, "string") // + 1 for NUL byte
    copyArray(b, pos, s, 0)
    return s.asString()
}

// TODO: Should be private!
// NOTE: -8 to offset the +8 which codegen.go adds for arrays/string -> external fns
fn asString(b: []byte) string = unsafe(b, -8, string)