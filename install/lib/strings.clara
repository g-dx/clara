// ---------------------------------------------------------------------------------------------------------------------

struct stringBuffer {
    data: []byte
    size: int
}

// ---------------------------------------------------------------------------------------------------------------------

fn NewStringBuffer(cap: int) stringBuffer {
    return StringBuffer(byteArray(cap), 0)
}

// ---------------------------------------------------------------------------------------------------------------------

fn append(buf: stringBuffer, s: string) {
    newSize := buf.size + s.length
    if newSize > buf.data.length {
        buf.grow()
    }
    copyString(s, 0, buf.data, buf.size)
    buf.size = newSize
}

// ---------------------------------------------------------------------------------------------------------------------

fn size(buf: stringBuffer) int {
    return buf.size
}

// ---------------------------------------------------------------------------------------------------------------------
// TODO: Should be "private"
fn grow(buf: stringBuffer) {
    data := byteArray(buf.data.length * 2)
    copyArray(buf.data, 0, data, 0)
    buf.data = data
}

// ---------------------------------------------------------------------------------------------------------------------

fn toString(buf: stringBuffer) string {
    return buf.data.toString()
}

// ---------------------------------------------------------------------------------------------------------------------

fn append(s1: string, s2: string) string {
    length := s1.length + s2.length
    bytes := byteArray(length + 1, length) // + 1 for NUL byte
    copyString(s1, 0, bytes, 0)
    copyString(s2, 0, bytes, s1.length)
    return bytes.asString()
}

// ---------------------------------------------------------------------------------------------------------------------

fn copyString(src: string, srcPos: int, dest: []byte, destPos: int) {
    if src.length == srcPos {
        return
    }
    dest[destPos] = src[srcPos]
    copyString(src, srcPos+1, dest, destPos+1)
}

// ---------------------------------------------------------------------------------------------------------------------

fn toString(b: []byte) string {
    s := byteArray(b.length + 1, b.length) // + 1 for NUL byte
    copyArray(b, 0, s, 0)
    return s.asString()
}

// ---------------------------------------------------------------------------------------------------------------------
// External Functions

// TODO: Should be private!
fn asString(b: []byte) string // Does not copy array!