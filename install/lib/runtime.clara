// Linked List of all stack frames up to stack base
struct frame {
    next: frame
    map: gcMap
}

// GC roots at a particular point in a stack frame
struct gcMap {
    roots: []byte
}

// C -> Clara entrypoint
fn entrypoint(argc: int, argv: int) {
    setStackBase(getFramePointer()) // Must be first as GC requires this info!

    // TODO: Add to runtime struct
    args := parseArgs(argc, argv)

    main() // Off we go...
}

fn parseArgs(argc: int, argv: int) []string {
    args := stringArray(argc, "")
    buf := NewStringBuffer(16)
    i := 0
    while i < argc {
        args[i] = buf.parseArg(unsafe(argv, i * 8, pointer).deref)
        buf.reset()
        i = i + 1
    }
    return args
}

fn parseArg(buf: stringBuffer, arg: int) string {
    loop := true
    off := 0
    max := 1<<6  // Read bytes in 64-bit blocks
    while loop {
        shift := 0
        bytes := unsafe(arg, off, pointer).deref
        while shift < max and loop {
            b := (bytes >> shift) & 0xFF
            if b == 0x00 {
                loop = false // NUL - end of string
            } else {
                buf.append(b)
                shift = shift + 8
            }
        }
        off = off + 8
    }
    return buf.toString()
}

// Called from user code to crash the program
fn panic(cause: string) {
    printf("\n// -----------------------------------------------------------------------------\n")
    printf("// Panic: %s\n", cause)
    printf("// -----------------------------------------------------------------------------\n")
    exit(1)
}

// Invoked by an ASM trampoline (See codegen.go) for invalid array access
fn indexOutOfBounds(index: int) {
    printf("\n// -----------------------------------------------------------------------------\n")
    printf("// Crash: Index (%d) is out of bounds!\n", index)
    printf("// -----------------------------------------------------------------------------\n")
    printf("\nBacktrace:\nTODO!\n\n")
    // TODO: Output stacktrace
    exit(1)
}

// ---------------------------------------------------------------------------------------------------------------------
// External Functions
// ---------------------------------------------------------------------------------------------------------------------

 // Implemented in assembly by codegen.go & called by C main. Invokes entrypoint(int, int, int) defined
 // above. Defined here to prevent redeclares.
fn asm_entrypoint() int

// Source: libc, https://www.gnu.org/software/libc/manual/html_node/Normal-Termination.html#Normal-Termination
fn exit(status: int) nothing

fn getFramePointer() frame // Implemented in assembly by codegen.go
fn isStackBase(f: frame) bool
fn setStackBase(f: frame) nothing

// WARNING: Type system escape hatch! Use with extreme caution!
//
// ptr: Pointer to heap
// off: Offset from pointer
// type: Type of return type
// Returns the calculated memory location interpreted as the parameterised type
fn unsafe(ptr: int, off: int, type: int) int // Implemented in assembly by codegen.go
