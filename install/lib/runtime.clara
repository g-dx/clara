// Linked List of all stack frames up to stack base
struct frame {
    next: frame
    map: gcMap
}

// GC roots at a particular point in a stack frame
struct gcMap {
    roots: []byte
}

// Inserted by compiler to be called at start of `main()` before any other code
fn init() {
    setStackBase(getFramePointer().next) // Capture frame pointer of C 'main'
}

// Called from user code to crash the program
fn panic(cause: string) {
    printf("\n// -----------------------------------------------------------------------------\n")
    printf("// Panic: %s\n", cause)
    printf("// -----------------------------------------------------------------------------\n")
    abort()
}

// Invoked by an ASM trampoline (See codegen.go) for invalid array access
fn indexOutOfBounds(index: int) {
    printf("\n// -----------------------------------------------------------------------------\n")
    printf("// Crash: Index (%d) is out of bounds!\n", index)
    printf("// -----------------------------------------------------------------------------\n")
    printf("\nBacktrace:\nTODO!\n\n")
    // TODO: Output stacktrace
    abort()
}

// ---------------------------------------------------------------------------------------------------------------------
// External Functions
// ---------------------------------------------------------------------------------------------------------------------

// Source: libc, https://www.gnu.org/software/libc/manual/html_node/Aborting-a-Program.html#Aborting-a-Program
fn abort() nothing

fn getFramePointer() frame // Implemented in assembly by codegen.go
fn isStackBase(f: frame) bool
fn setStackBase(f: frame) nothing

// WARNING: Type system escape hatch! Use with extreme caution!
//
// ptr: Pointer to heap
// off: Offset from pointer
// type: Type of return type
// Returns the calculated memory location interpreted as the parameterised type
fn unsafe(ptr: int, off: int, type: int) int // Implemented in assembly by codegen.go
