enum option«T» {
    Some(t: T)
    None()
}

fn isNone«T»(o: option«T») bool {
    match o {
        case Some(v): return false
        case None(): return true
    }
}

fn isSome«T»(o: option«T») bool = not o.isNone()

fn filter«T»(o: option«T», pred: fn(T) bool) option«T» {
    match o {
        case Some(v): return pred(v) ? o : None«T»()
        case None(): return o
    }
}

fn orElse«T»(o: option«T», other: T) T {
    match o {
        case Some(v): return v
        case None(): return other
    }
}

fn map«T, R»(o: option«T», f: fn(T) R) option«R» {
    match o {
        case Some(v): return Some(f(v))
        case None(): return None«R»()
    }
}

fn peek«T»(o: option«T», f: fn(T)) option«T» {
    match o {
        case Some(v):
            f(v)
        case None():
    }
    return o
}

// ----------------------------------------------------------------------

struct pair«T, R» {
    first: T
    second: R
}

// ----------------------------------------------------------------------

enum result«T, E» {
    Ok(val: T)
    Err(val: E)
}

fn map«T, E, R»(r: result«T, E», f: fn(T) R) result«R, E» {
    match r {
        case Ok(v): return Ok«R, E»(f(v))
        case Err(e): return r.unsafe(0, type(result«R, E»))
    }
}

fn then«T, E, R»(r: result«T, E», f: fn(T) result«R, E») result«R, E» {
    match r {
        case Ok(v): return f(v)
        case Err(e): return r.unsafe(0, type(result«R, E»))
    }
}

fn peek«T, E»(r: result«T, E», f: fn(T) option«E») result«T, E» {
    match r {
        case Ok(v):
            match f(v) {
                case Some(e):
                    return Err«T, E»(e)
                case None():
                    return r
            }
        case Err(e): return r
    }
}


// ----------------------------------------------------------------------

enum either«L, R» {
    Left(val: L)
    Right(val: R)
}
