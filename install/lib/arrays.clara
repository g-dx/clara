// ---------------------------------------------------------------------------------------------------------------------

fn copyArray(src: []byte, srcPos: int, dest: []byte, destPos: int) {
    if src.length == srcPos or dest.length == destPos {
        return
    }
    dest[destPos] = src[srcPos]
    copyArray(src, srcPos+1, dest, destPos+1)
}

// ---------------------------------------------------------------------------------------------------------------------

struct arrayHeader {
    length: int
}

fn stringArray(length: int, default: string) []string {
    h := claralloc((length * 8) + 8, "[]string", 3).toHeader() // int == 8 bytes, + 8 for length
    h.length = length
    a := h.toStringArray()

    // ----------------------------------------------------------------------
    // Initialise contents. This prevents NULL from escaping into user
    // code. Revisit when option/maybe is fully worked out
    // ----------------------------------------------------------------------
    for i in 0 .. a.length {
        a[i] = default
    }
    return a
}

fn intArray(length: int) []int {
    h := claralloc((length * 8) + 8, "[]int", 2).toHeader() // int == 8 bytes, + 8 for length
    h.length = length
    return h.toIntArray()
}

fn byteArray(length: int) []byte {
    return byteArray(length, length)
}

// TODO: Should be private!
fn byteArray(size: int, length: int) []byte {
    return byteArray(size, length, 1, "[]byte")
}

fn byteArray(size: int, length: int, id: int, desc: string) []byte {
    if length > size {
        panic("Length cannot be greater than size!")
    }
    h := claralloc(size + 8, desc, id).toHeader() // + 8 for length
    h.length = length
    return h.toByteArray()
}

fn toStringArray(header: arrayHeader) []string = unsafe(header, 0, []string)
fn toIntArray(header: arrayHeader) []int = unsafe(header, 0, []int)
fn toByteArray(header: arrayHeader) []byte = unsafe(header, 0, []byte)
fn toHeader(b: block) arrayHeader = unsafe(b, 0, arrayHeader)