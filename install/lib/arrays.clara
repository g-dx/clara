// ---------------------------------------------------------------------------------------------------------------------

fn copyArray(src: bytes, srcPos: int, dest: bytes, destPos: int) {
    if src.length() == srcPos or dest.length() == destPos {
        return
    }
    dest.set(destPos, src.get(srcPos))
    copyArray(src, srcPos+1, dest, destPos+1)
}

fn setElement«T»(src: []T, pos: int, val: T) []T {
    src[pos] = val
    return src
}

// ---------------------------------------------------------------------------------------------------------------------

struct arrayHeader {
    length: int
}

fn array«T»(length: int) []option«T» = array(length, None«T»())
fn array«T»(length: int, default: T) []T = array(length, initWith(default), "[]T", 7)

// Special function used by the compiler when dealing with array literals TODO: Should be private
fn arrayNoInit«T»(length: int) []T = array(length, noInit«T»(), "[]T", 7)

// TODO: Should be private
fn array«T»(length: int, init: fn([]T), description: string, tag: int) []T {
    // TODO: Would be nice to lookup type ID for default & configure array type ID appropriately
    h := claralloc((length * 8) + 8, description, tag).toHeader() // pointer == 8 bytes, + 8 for length
    h.length = length
    a := h.toArray«T»()
    init(a)
    return a
}

fn stringArray(length: int, default: string) []string = array(length, initWith(default), "[]string", 3)
fn intArray(length: int) []int = array(length, noInit«int»(), "[]int", 2)

// Array initializers
fn initWith«T»(default: T) fn([]T) {
    return fn(a: []T) {
        for i in 0 .. a.length {
            a[i] = default
        }
    }
}

fn noInit«T»() fn([]T) = fn(a: []T) {}

fn toHeader(b: block) arrayHeader = unsafe(b, 0, type(arrayHeader))
fn toArray«T»(header: arrayHeader) []T = unsafe(header, 0, type([]T))