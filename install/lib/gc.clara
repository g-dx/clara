fn gc() {
    // TODO: Track object live counts & space freed
    debug("gc", "──────────────────────────────────────────────────────────────────────────── GC \n")
    gcMark()
    gcSweep()
    debug("gc", "───────────────────────────────────────────────────────────────────────────────\n")
}

// Tag-Free Garbage Collection for Strongly Typed Programming Languages
// https://cs.nyu.edu/goldberg/pubs/gold91.pdf
fn gcMark() {
    debug("gc", "🔎 Mark:\n\n")
    fp := getFramePointer()
    roots := fp.map.roots

    j := 0
    while not fp.isStackBase() {
        fp = fp.next
        debug("gc", "▶ (%d) <description>\n", j)
        i := 0
        while i < roots.length {
            gcMarkSlot(fp, roots[i])
            i = i + 1
        }
        roots = fp.map.roots
        j = j + 1
    }
}

fn gcMarkSlot(fp: frame, off: byte) {
    gcMarkPointer(unsafe(fp, -off * 8, pointer), 1)
}

fn gcMarkPointer(p: pointer, level: int) {
    p = unsafe(p.deref, 0, pointer)
    block := unsafe(p, -16, block)
    info := block.loadTypeInfo()

    if block.isReadOnly() {
        gcMarkDebug(p, level, info.name, "🔐")
        return
    }
    if block.isMarked() {
        gcMarkDebug(p, level, info.name, "🆗")
        return
    }

    // Mark block & walk roots
    gcMarkDebug(p, level, info.name, "✅")
    block.setMark()
    i := 0
    roots := info.roots // TODO: Fix AST!
    while i < roots.length {
        gcMarkPointer(unsafe(p, roots[i] * 8, pointer), level + 5)
        i = i + 1
    }
}

fn gcMarkDebug(p: pointer, level: int, typeName: string, icon: string) {
    debug("gc", " - (0x%lx) %s%*s", p, icon, level, "")
    debug("gc", "'%s'\n", typeName)
}

// http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/
fn gcSweep() {
    debug("gc", "\n\n🗑️🧹 Sweep:\n")
    b := getBlocks()
    prev := emptyBlock() // TODO: This is unfortunate! Block.None would be much nicer here!
    while b.isValidBlock() {
        if b.isMarked() {
            b.clearMark()
            prev = b
            b = b.next
        } else {
            unreached := b
            if prev.isValidBlock() {
                prev.next = unreached.next
            } else {
                setBlocks(unreached.next)
            }
            debug("gc", "  - (0x%lx) 🔥\n", b.inc(16)) // Increment pointer to point to start of user mem
            b = unreached.next
            clarafree(unreached)
        }
    }
}

struct pointer {
    deref: int
}

// Compile time generated structure holding runtime type information
struct typeInfo {
    name: string
    roots: []byte
}

// 3 = slot width of typeInfo struct above
fn loadTypeInfo(b: block) typeInfo = unsafe(typeInfoTable, (b.typeId() * 8) * 2, typeInfo)

fn setMark(b: block) {
    if b.isMarked() {
        panic("setMark() called on marked block!")
    }
    b.header = b.header | 0x1
}

fn clearMark(b: block) {
    if not b.isMarked() {
        panic("clearMark() called on unmarked block!")
    }
    b.header = b.header & 0x7FFFFFFFFFFFFFFE // TODO: ~0x1 would be nicer
}

fn isMarked(b: block) bool = (b.header & 0x1) == 0x1
fn isReadOnly(b: block) bool = (b.header & 0x2) == 0x2
fn typeId(b: block) int = (b.header & 0xFFFF << 48) >> 48

// ---------------------------------------------------------------------------------------------------------------------
// External Functions
// ---------------------------------------------------------------------------------------------------------------------
fn isGcDebug() bool
fn isValidBlock(b: block) bool
fn emptyBlock() block

// NOTE: This is not a function! Do not call it! It _should_ be a global symbol.
fn typeInfoTable() nothing // TODO: Turn this into an array!