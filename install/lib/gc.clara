fn gc() {
    // TODO: Track object live counts & space freed
    debug("gc", "──────────────────────────────────────────────────────────────────────────── GC \n")
    gcMark()
    gcSweep()
    debug("gc", "───────────────────────────────────────────────────────────────────────────────\n")
}

// Tag-Free Garbage Collection for Strongly Typed Programming Languages
// https://cs.nyu.edu/goldberg/pubs/gold91.pdf
fn gcMark() {
    debug("gc", "🔎 Mark:\n\n")
    fp := getFramePointer()
    roots := fp.map.roots

    // -------------------------------------------------------------
    // Stack
    // -------------------------------------------------------------
    debug("gc", "Stack\n")
    j := 0
    while not fp.isStackBase() {
        fp = fp.next
        debug("gc", "▶ (%d) <description>\n", j)
        for root in roots {
            gcMarkSlot(fp, root)
        }
        roots = fp.map.roots
        j = j + 1
    }


    // -------------------------------------------------------------
    // Global variables
    // -------------------------------------------------------------
    debug("gc", "\nGlobals\n")
    gcMarkPointer(unsafe(getRuntime(), 0, type(pointer)), 0)
}

fn gcMarkSlot(fp: frame, off: int) {
    gcMarkPointer(fp.slot(off).deref, 1)
}

fn gcMarkPointer(p: pointer, level: int) {
    if not p.isReal() {
        gcMarkDebug(p, level, "<not a pointer>", "🧯")
        return
    }
    block := unsafe(p, -16, type(block))
    info := typeInfoTable()[block.typeId()]

    if block.isReadOnly() {
        gcMarkDebug(p, level, info.getName(), "🔐")
        return
    }
    if block.isMarked() {
        gcMarkDebug(p, level, info.getName(), "🆗")
        return
    }

    // Mark block & process type
    gcMarkDebug(p, level, info.getName(), "✅")
    block.setMark()
    match info {
        case StructType(name, roots):
            for root in roots {
                gcMarkPointer(p.inc(root * 8).deref, level + 5)
            }
        case StringType():
            // Already marked - no further action required
        case ArrayType(name, elemIsPointer):
            if elemIsPointer {
                len := p.deref.toRawInt() // Array lengths are already tagged
                for i in 0 .. len {
                    gcMarkPointer(p.inc(8 + (i * 8)).deref, level + 5)
                }
            }
        case FunctionType():
            panic("Read-only functions cannot be marked")
    }
}

fn gcMarkDebug(p: pointer, level: int, name: string, icon: string) {
    debug("gc", " - (0x%09lx) %s%*s", p, icon, level, "")
    debug("gc", "'%s'\n", name)
}

// http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/
fn gcSweep() {
    debug("gc", "\n\n🗑️🧹 Sweep:\n")
    b := getBlocks()
    prev := emptyBlock() // TODO: This is unfortunate! Block.None would be much nicer here!
    while b.isValidBlock() {
        if b.isMarked() {
            b.clearMark()
            prev = b
            b = b.next
        } else {
            unreached := b
            if prev.isValidBlock() {
                prev.next = unreached.next
            } else {
                setBlocks(unreached.next)
            }
            debug("gc", "  - (0x%lx) 🔥\n", b.inc(16)) // Increment pointer to point to start of user mem
            b = unreached.next
            clarafree(unreached)
        }
    }
}

fn toRawInt(p: pointer) int = unsafe(p, 0, type(int))
fn isNull(p: pointer) bool = p.toTaggedInt() == 0
fn isReal(p: pointer) bool {
    i := p.toTaggedInt()
    return ((i & 0x7) == 0) and i > 1024
}

fn inc(p: pointer, off: int) pointer = unsafe(p, off, type(pointer))

// Compile time generated structure holding runtime type information
enum typeInfo {
    StructType(name: string, roots: []int)
    StringType()
    ArrayType(name: string, elemIsPointer: bool)
    FunctionType()
}

fn getName(t: typeInfo) string {
    match t {
        case StructType(name, roots):
            return name
        case ArrayType(name, elemIsPointer):
            return name
        case StringType():
            return "string"
        case FunctionType():
            return "function"
    }
}

fn setMark(b: block) {
    if b.isMarked() {
        panic("setMark() called on marked block!")
    }
    b.header = b.header | 0x1
}

fn clearMark(b: block) {
    if not b.isMarked() {
        panic("clearMark() called on unmarked block!")
    }
    b.header = b.header & ~0x1
}

fn isMarked(b: block) bool = (b.header & 0x1) == 0x1
fn isReadOnly(b: block) bool = (b.header & 0x2) == 0x2
fn typeId(b: block) int = (b.header & 0xFFFF << 47) >> 47

// ---------------------------------------------------------------------------------------------------------------------
// External Functions
// ---------------------------------------------------------------------------------------------------------------------

// Implemented in codegen.go
fn typeInfoTable() []typeInfo

// Implemented in assembly by codegen.go
// TODO: It would be nice to have control over this directly in Clara
fn toTaggedInt(p: pointer) int
fn toUntaggedInt(p: pointer) int