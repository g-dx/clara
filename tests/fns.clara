fn main() {

    // ------------------------------------------------------------------
    // Basic
    // ------------------------------------------------------------------

    // Simple
    println(square(2)) // EXPECT: 4
    println(cube(3))   // EXPECT: 27

    // Dot selection
    println(2.square()) // EXPECT: 4
    println(3.cube())   // EXPECT: 27
    println(2.cube().pow(3).inc()) // EXPECT: 513

    // Parameters
    println(5.apply(cube)) // EXPECT: 125

    // Variable storage
    f := square
    println(f(8)) // EXPECT: 64
    f = cube
    println(f(8)) // EXPECT: 512

    inc := dec // Shadow inc()!
    println(inc(9)) // EXPECT: 8

    // Returns
    println(ident(square)(5)) // EXPECT: 25
    println(ident(cube)(5))   // EXPECT: 125
    println(f1(1)(2)(3)(4))   // EXPECT: 64

    // Overloaded argument resolution
    execute := fn(i: int, f: fn(int)) = f(i)
    100.execute(println) // EXPECT: 100

    // ------------------------------------------------------------------
    // Anonymous
    // ------------------------------------------------------------------

    // Simple
    a1 := fn() string = "<anon fn>"
    println(a1()) // EXPECT: <anon fn>
    a2 := fn(i: int) int = i * i
    println(a2(4)) // EXPECT: 16

    // Immediate invocation
    fn(i: int, j: int) { printf("%d\n", i * j) }(12, 12) // EXPECT: 144

    // Switch anon for global
    a2 = cube
    println(a2(4)) // EXPECT: 64

    // Nested
    a3 := fn(s: string) string {
        x := fn(s: string) string {
            y := fn(s: string) string {
                z := fn(s: string) string = s
                return s.append(z(s))
            }
            return s.append(y(s))
        }
        return s.append(x(s))
    }
    println(a3("a")) // EXPECT: aaaa

    // Anon return global
    a4 := fn() fn(int) int = cube
    println(a4()(4)) // EXPECT: 64

    // ------------------------------------------------------------------
    // Closures
    // ------------------------------------------------------------------
    x := 8
    y := 9
    z := 10
    str := "<closure>"

    // Simple
    c1 := fn(z: int) int = x * y * z // Ensure 'z' is not captured
    println(c1(5)) // EXPECT: 360
    c2 := fn(a: string) string = a.append(str).append(a)
    println(c2("*")) // EXPECT: *<closure>*
    c3 := fn(s: string) = printf("%s\n", s)
    c3("Hello!")  // EXPECT: Hello!

    // Immediate invocation
    fn(i: int) { printf("%s - %d\n", str, i) }(1234) // EXPECT: <closure> - 1234

    // Switch closure for global
    c1 = square
    println(c1(3)) // EXPECT: 9

    // Nested
    _0 := "a"
    c4 := fn(a: string) string {
        x := fn(b: string) string {
            y := fn(c: string) string {
                z := fn(d: string) string = c.append("e")
                return b.append(z("d"))
            }
            return a.append(y("c"))
        }
        return _0.append(x("b"))
    }
    println(c4("a")) // EXPECT: aabce

    // Capture by value (immutable)
    a := 1
    c5 := fn() int {
        a = a + 1
        return a
    }
    a = 10
    println(c5()) // EXPECT: 2

    // Capture by value (mutable)
    s := S(1)
    c6 := fn() int {
        s.i = s.i + 1
        return s.i
    }
    println(s.i + c6()) // EXPECT: 3
    s.i = 10
    println(s.i + c6()) // EXPECT: 21

    // ------------------------------------------------------------------
    // Functional
    // ------------------------------------------------------------------

    // Currying
    add := fn(a: int) fn(int) int = fn(b: int) int = a + b
    add3 := add(3)
    println(add3(2)) // EXPECT: 5

    // Composition
    compose := fn(f: fn(int) int, g: fn(int) int) fn(int) int {
        return fn(x: int) int = g(f(x))
    }
    println(compose(cube, square)(2)) // EXPECT: 64
}

fn apply(i: int, f: fn(int) int) int = f(i)
fn ident(f: fn(int) int) fn(int) int = f

fn square(i: int) int = i * i
fn cube(i: int) int = i * i * i
fn dec(i: int) int = i - 1
fn inc(i: int) int = i + 1
fn pow(x: int, n: int) int {
    if n == 1 {
        return x
    }
    return x * pow(x, n - 1)
}

fn f1(i: int) fn(int) fn(int) fn(int) int = f2
fn f2(i: int) fn(int) fn(int) int = f3
fn f3(i: int) fn(int) int = cube

struct s {
    i: int
}