fn main() {

    // Type parameters bound by callsite
    apply(999, fn(i: int) bool = i > 10).println() // EXPECT: true
    apply("Helloworld", fn(s: string) int = s.length).println() // EXPECT: 10
    false.apply(fn(b: bool) string = b.toString()).println() // EXPECT: false

    e := Employee("Some Body", 61, false, Address(1, "Street", "City", "SW1 3DL"))
    e.apply(fn(e: employee) bool = e.retired).println() // EXPECT: false

    // Explicit type parameters
    e.apply«employee, address»(fn(e: employee) address = e.addr).city.println() // EXPECT: City

    // Output parameter required
    // TODO: Re-enable after unsafe actually has the type(R) tag passed to it!
//    cast«int, bool»(1).println() // EXPECT: true

    // ------------------------------------------------------------------
    // Boxing/Unboxing

    // No boxing
    identity("No boxing").println() // EXPECT: No boxing

    // Primitive boxed arg & unboxed return primitive
    identity(10).println() // EXPECT: 10

    // Function boxed arg & boxed return function
    identity(fn(i: int) bool = i > 5)(10).println() // EXPECT: true

    // Primitive boxed arg & boxed closure
    closure(12345678)().println() // EXPECT: 12345678

    // Complex function boxed arg & unboxed primitive return
    apply2(10, fn(i: int) fn(int) bool {
        return fn(i: int) bool = i > 5
    }).println() // EXPECT: true

    // -------------------------------------------------------------
    // Generic structs

    x := fn(s: string, i: int, b: bool) = printf("%s, %d, %s\n", s, i, b.toString())

    p := Pair(Box(x), [1, 2, 3, 4, 5])
    p.left.val("Hello", -1, false) // EXPECT: Hello, -1, false
    p.right[4].println()           // EXPECT: 5

    fn(p: pair«box«fn(string, int, bool) nothing»,[]int») {
        p.left.val("Goodbye", 9999, true)
    }(p)
    // EXPECT: Goodbye, 9999, true

    // Set/get via methods
    v := 0
    p2 := p.mapLeft(fn(l: box«fn(string, int, bool) nothing») fn() int = fn() int {
        v = v + 1
        return v
    })
    p2.left().println() // EXPECT: 1
    p2.left().println() // EXPECT: 2
    p2.left().println() // EXPECT: 3

    p3 := p2.mapLeft(fn(l: fn() int) string = "Yo!")
    p3.left.println() // EXPECT: Yo!

    b := Box("string")
    b.get().println()   // EXPECT: string
    b.set("new string")
    b.get().println()   // EXPECT: new string

    // --------------------------------------------------------------
    // Generic enums
    l := [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].toList()
    l.foreach(print)
    println("") // EXPECT: 12345678910
    l.reduce(0, fn(acc: int, v: int) int = acc + v).println() // EXPECT: 55
}

struct box«T» {
    val: T
}
fn get«T»(b: box«T») T = b.val
fn set«T»(b: box«T», t: T) { b.val = t }

struct pair«L, R» {
    left: L
    right: R
}

fn mapLeft«L, R, S»(p: pair«L, R», map: fn(L) S) pair«S, R» = Pair(map(p.left), p.right)

fn identity«T»(t: T) T {
    gc()
    return t
}

fn closure«T»(t: T) fn() T {
    return fn() T = identity(t)
}

fn apply2«T, R»(t: T, f: fn(T) fn(T) R) R {
    tmp1 := f(t)
    tmp2 := tmp1(t)
    return tmp2
}

fn apply«T, R»(t: T, f: fn(T) R) R = f(t)
fn cast«T, R»(t: T) R = unsafe(t, 0, type(R))

struct employee {
    name: string
    age: int
    retired: bool
    addr: address
}

struct address {
    houseNumber: int
    street: string
    city: string
    postcode: string
}

enum list«T» {
    Element(val: T, rest: list«T»)
    Empty()
}

fn toList(a: []int) list«int» {
    l := Empty«int»()
    for x in a.length .. 0 {
        l = Element(a[x], l)
    }
    return l
}

fn foreach«T»(l: list«T», f: fn(T)) {
    match l {
        case Empty(): return
        case Element(e, rest):
            f(e)
            rest.foreach(f)
    }
}

fn map«T, R»(l: list«T», f: fn(T) R) list«R» {
    match l {
        case Empty(): return Empty«R»()
        case Element(e, rest): return Element(f(e), rest.map(f))
    }
}

fn reduce«T»(l: list«T», acc: T, f: fn(T, T) T) T {
    match l {
        case Empty(): return acc
        case Element(e, rest): return rest.reduce(f(acc, e), f)
    }
}